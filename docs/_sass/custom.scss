// Counters

// Initialize the definition counter
body {
    counter-reset: h1counter h2counter definition lemma theorem example remark corollary; 
}

h1 {
    counter-increment: h1counter;
}

// Reset the definition counter every time a new <h2> starts
h2 {
    counter-increment: h2counter;
    counter-reset: definition lemma theorem example remark corollary; 
}


// \definecolor{tab-blue}{rgb}{0.341,0.471,0.643}
// \definecolor{tab-orange}{rgb}{0.894,0.580,0.267}
// \definecolor{tab-red}{rgb}{0.820,0.380,0.365}
// \definecolor{tab-teal}{rgb}{0.522,0.714,0.698}
// \definecolor{tab-green}{rgb}{0.416,0.624,0.345}
// \definecolor{tab-yellow}{rgb}{0.906,0.792,0.376}
// \definecolor{tab-purple}{rgb}{0.659,0.486,0.624}
// \definecolor{tab-pink}{rgb}{0.945,0.635,0.663}
// \definecolor{tab-brown}{rgb}{0.588,0.463,0.384}
// \definecolor{tab-grey}{rgb}{0.722,0.690,0.675}

// tab-blue (86, 120, 163)
// tab-orange (227, 147, 68)
// tab-red (209, 96, 93)
// tab-teal (133, 182, 177)
// tab-green (106, 159, 87)
// tab-yellow (231, 201, 95)
// tab-purple (168, 123, 159)
// tab-pink (240, 161, 169)
// tab-brown (149, 118, 97)
// tab-grey (184, 175, 172)

@mixin box-style {
    position: relative;
    margin: 1rem 0;
    padding: 0.5rem 1rem;
    border: 2px solid #000;
    border-radius: 0.2rem;
    align-items: center; // Align content vertically in the center

    &::before {
        margin: 0 0;
        padding: 0;
        font-weight: bold;
        color: #000;
    }

    &::after {
        white-space: pre; // Retain spaces and newlines
    }

    p {
        margin: 0; // Reset margin for the paragraph
    }
}

@mixin content-with-name($type, $color) {
    $capitalizedType: capitalize($type);
    @include box-style;
    background-color: $color;


    
    &::before {
        counter-increment: $type;
        content: '#{$capitalizedType} ' counter(h2counter) '.' counter($type);
    }

    &[name]:not([name=""])::before {
        content: '#{$capitalizedType} ' counter(h2counter) '.' counter($type) ':   ';
        white-space: pre;
    }
}

@function capitalize($string) {
    @return to-upper-case(str-slice($string, 0, 1))+str-slice($string, 2);
}

.definition-box {
    @include content-with-name(definition, rgba(231, 201, 95, 0.2));

    .definition-label {
        font-weight: bold;
    }
}

.theorem-box {
    @include content-with-name(theorem, rgba(86, 120, 163, 0.2));
}

.lemma-box {
    @include content-with-name(lemma, rgba(133, 182, 177, 0.2));
}

.corollary-box {
    @include content-with-name(corollary, rgba(86, 120, 163, 0.2));
}

.remark-box {
    @include content-with-name(remark, rgba(86, 120, 163, 0.1));
}





@mixin proof-style {
    position: relative;
    margin: 1rem 0;
    padding: 0.5rem 1rem;
    border: 1px solid #000;
    border-radius: 0.2rem;
    /* Use flex display to arrange content */
    align-items: center;
    /* Align content vertically in the center */

    &::before {
        margin-top: 0;
        margin-bottom: 0;
        padding: 0.0rem 0.0rem;
        font-style: italic;
        content: 'Proof: ';
        /* Add underline text decoration */
        color: #000;
    }

    &::after {
        content: "\A";
        white-space: pre; // This is important to make the newline work
    }

    p {
        margin: 0;
        /* Reset margin for the paragraph */
    }
}


.proof-box {
    @include proof-style;
    background-color: rgba(184, 175, 172, 0.05);

    &::before {
        content: 'Proof.'; // Default content
    }

    &[proof-name]:not([proof-name=""])::before {
        content: attr(proof-name) ". "; // Concatenate the content with a semicolon and a space
    }
}